apiVersion: apps/v1
kind: Deployment
metadata:
  name: spsf-external-apis-{{ .Values.env }}
  namespace: {{ .Values.env }}
  labels:
    app: "spsf-external-apis-{{ .Values.env }}"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: "spsf-external-apis-{{ .Values.env }}"
  template:
    metadata:
      labels:
        app: "spsf-external-apis-{{ .Values.env }}"
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      containers:
      - name: "spsf-external-apis-service"
        image: "{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: Always
        ports:
        - containerPort: {{ .Values.image.port }}
        resources:
            requests:
              cpu: {{ default "100m" .Values.requests.cpu }}
              memory: {{ default "256Mi" .Values.requests.memory  }}
            limits:
              cpu: {{  default "200m" .Values.requests.cpu }}
              memory: {{ default "512Mi" .Values.requests.memory }}
        volumeMounts:
        - name: secrets-store01-inline
          mountPath: "/mnt/secrets-store"
          readOnly: true
        env:
        - name: AZURE_COSMOS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: cosmosdbname
              key: cosmosdbname
        - name: AZURE_COSMOS_DB_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: cosmosdbendpoint
              key: cosmosdbendpoint
        - name: AZURE_COSMOS_DB_KEY
          valueFrom:
            secretKeyRef:
              name: cosmosdbkey
              key: cosmosdbkey
      volumes:
      - name: secrets-store01-inline
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "spsf-external-apis-{{ .Values.env }}-secrets-store"