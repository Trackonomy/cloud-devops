name: Deploy image gallery
on:
  workflow_call:
    inputs:
      environment:
        type: string
    secrets:
      TFBACKENDIG:
        required: true
      TFSECRETVARS:
        required: true
  workflow_dispatch:
    inputs:
      environment:
        type: environment
    secrets:
      TFBACKENDIG:
        required: true
      TFSECRETVARS:
        required: true
env:
  TFVARS: ${{ vars.TFVARS }}

jobs:
  deploy_image_gallery:
      environment: ${{ inputs.environment }}
      runs-on: ubuntu-latest
      name: Deploy image gallery
      steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Move terraform folder
        run: mkdir -p /tmp/terraform/node-dev/image_gallery && cp -Rv terraform/node-dev/image_gallery/* /tmp/terraform/node-dev/image_gallery
      - name: Inject secrets
        env:
          TFBACKENDIG: '${{ secrets.TFBACKENDIG }}'
          TFSECRETVARS: '${{ secrets.TFSECRETVARS }}'
          WORK_DIR: /tmp/terraform/node-dev/image_gallery
        run: |
          echo "$TFBACKENDIG" > $WORK_DIR/backends/backend.conf
          echo "$TFSECRETVARS" > $WORK_DIR/.auto.tfvars
          echo "$TFVARS" > $WORK_DIR/terraform.tfvars
      - name: Setup terraform
        env:
          WORK_DIR: /tmp/terraform/node-dev/image_gallery
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.7
      - name: Terraform Init
        env:
          WORK_DIR: /tmp/terraform/node-dev/image_gallery
        id: init
        run: cd $WORK_DIR && terraform init --backend-config=$WORK_DIR/backends/backend.conf

      - name: Terraform Validate
        env:
          WORK_DIR: /tmp/terraform/node-dev/image_gallery
        id: validate
        run: cd $WORK_DIR && terraform validate -no-color

      - name: Terraform Apply
        env:
          WORK_DIR: /tmp/terraform/node-dev/image_gallery
        id: apply
        run: cd $WORK_DIR && terraform apply --auto-approve -no-color
        continue-on-error: true
      - name: Clean terraform directory
        run: rm -r /tmp/terraform
      - name: Fail pipeline
        if: steps.apply.outcome != 'success'
        run: |
          echo "Terraform apply failed. Please, review logs"
          exit 1