name: Deploy node-dev to cloud
on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: "node-dev branch name"
        required: true
      environment:
        type: environment
    secrets:
      TFBACKEND:
        required: true
      TFSECRETVARS:
        required: true
      MANAGEDIDENTITY:
        required: true
      AZURE_CREDENTIALS:
        required: true
      GH_PAT:
        required: true
env:
  TFVARS: ${{ vars.TFVARS }}

jobs:
  deploy_image_gallery:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    name: Deploy image gallery
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Move terraform folder
      run: mkdir -p /tmp/terraform && cp -Rv terraform/* /tmp/terraform
    - name: Inject secrets
      env:
        TFBACKEND: '${{ secrets.TFBACKEND }}'
        TFSECRETVARS: '${{ secrets.TFSECRETVARS }}'
        WORK_DIR: /tmp/terraform
      run: |
        echo "$TFBACKEND" > $WORK_DIR/image_gallery/backends/backend.conf
        echo "$TFSECRETVARS" > $WORK_DIR/image_gallery/.auto.tfvars
        echo "$TFVARS" > $WORK_DIR/image_gallery/terraform.tfvars
    - name: Setup terraform
      env:
        WORK_DIR: /tmp/terraform/image_gallery
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.7
    - name: Terraform Init
      env:
        WORK_DIR: /tmp/terraform/image_gallery
      id: init
      run: cd $WORK_DIR && terraform init --backend-config=$WORK_DIR/backends/backend.conf

    - name: Terraform Validate
      env:
        WORK_DIR: /tmp/terraform/image_gallery
      id: validate
      run: cd $WORK_DIR && terraform validate -no-color

    - name: Terraform Apply
      env:
        WORK_DIR: /tmp/terraform/image_gallery
      id: apply
      run: cd $WORK_DIR && terraform apply --auto-approve -no-color
      continue-on-error: true
    - name: Clean terraform directory
      run: rm -r /tmp/terraform
  
  #upload_artifact:
  #  needs: deploy_image_gallery
  #  environment: ${{ inputs.environment }}
  #  runs-on: ubuntu-latest
  #  name: Upload node-dev artifact
  #  steps:
  #  - name: Checkout node-dev repo
  #    uses: actions/checkout@v3
  #    with:
  #      fetch-depth: 1
  #      repository: Trackonomy/node-dev
  #      token: '${{ secrets.GH_PAT }}'
  #      ref: ${{ inputs.branch_name }}
  #      path: node-dev
  #  - name: Package node-dev
  #    uses: actions/upload-artifact@v2
  #    with:
  #      name: node-dev
  #      path: ${{ GITHUB.WORKSPACE }}/node-dev

  create_image_build:
    needs: deploy_image_gallery
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    name: Build virtual machine
    timeout-minutes: 120
    steps:
    - name: Checkout node-dev repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
        repository: Trackonomy/node-dev
        token: '${{ secrets.GH_PAT }}'
        ref: ${{ inputs.branch_name }}
        path: node-dev
    - name: Log in with Azure
      uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
    - name: Parse needed configuration
      id: parse-conf
      env:
        TFBACKEND: '${{ secrets.TFBACKEND }}'
        TFSECRETVARS: '${{ secrets.TFSECRETVARS }}'
      run: |
        echo "$TFBACKEND" > backend.conf
        echo "$TFSECRETVARS" > .auto.tfvars
        echo "$TFVARS" > terraform.tfvars
        export PROJECT_LOC=$(awk '/project_loc/ {print $3}' terraform.tfvars)
        echo "PROJECT_LOC=$(echo $PROJECT_LOC | tr -d '\r"')" >> $GITHUB_OUTPUT
        export PROJECT_NAME=$(awk '/project_name/ {print $3}' terraform.tfvars)
        echo "PROJECT_NAME=$(echo $PROJECT_NAME | tr -d '\r"')" >> $GITHUB_OUTPUT
        export SUB_ID=$(awk '/subscription_id/ {print $3}' .auto.tfvars)
        echo "SUB_ID=$(echo $SUB_ID | tr -d '\r"')" >> $GITHUB_OUTPUT
        export IM_GAL_ID=$(awk '/image_gallery_name/ {print $3}' terraform.tfvars)
        echo "IM_GAL_ID=$(echo $IM_GAL_ID | tr -d '\r"')" >> $GITHUB_OUTPUT
        export IM_NAME=$(awk '/image_name/ {print $3}' terraform.tfvars | tr -d ",")
        echo "IM_NAME=$(echo $IM_NAME | tr -d '\r"')" >> $GITHUB_OUTPUT
        export IM_VERSION=$(awk '/image_version/ {print $3}' terraform.tfvars | tr -d ",")
        echo "IM_VERSION=$(echo $IM_VERSION | tr -d '\r"')" >> $GITHUB_OUTPUT
        rm backend.conf .auto.tfvars terraform.tfvars
    - name: Create App Baked Image
      id: ImageBuilder
      uses: azure/build-vm-image@v0
      with:
        resource-group-name: ${{ steps.parse-conf.outputs.PROJECT_NAME }}
        managed-identity: ${{ secrets.MANAGEDIDENTITY }}
        location: ${{ steps.parse-conf.outputs.PROJECT_LOC }}
        source-os-type: 'linux'
        source-image: Canonical:UbuntuServer:18.04-LTS:latest
        customizer-source: ${{ GITHUB.WORKSPACE }}/node-dev
        customizer-script: |
          curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
          sudo apt-get install -y nodejs
          sudo apt-get install -y build-essential
          sudo mkdir -p /apis/node-dev
          sudo cp -r /tmp/node-dev/* /apis/node-dev
          cd /apis/node-dev
          sudo npm install pm2 -g --unsafe-perm=true --allow-root
          sudo npm install --unsafe-perm=true --allow-root
          pm2 start filter/nodeapp.js --name filter
          pm2 start mobile/nodeapp.js --name mobile
          pm2 start util/nodeapp.js --name util
          pm2 start external/nodeapp.js --name external
          pm2 start health-dash/nodeapp.js --name health-dash
          pm2 start tapeevents/nodeapp.js --name tapeevents
          pm2 save
          pm2 startup
          pm2 save
        dist-type: 'SharedImageGallery'
        dist-resource-id: '/subscriptions/${{steps.parse-conf.outputs.SUB_ID}}/resourceGroups/${{steps.parse-conf.outputs.PROJECT_NAME}}/providers/Microsoft.Compute/galleries/${{steps.parse-conf.outputs.IM_GAL_ID}}/images/${{steps.parse-conf.outputs.IM_NAME}}/versions/${{steps.parse-conf.outputs.IM_VERSION}}'
        dist-location: ${{steps.parse-conf.outputs.PROJECT_LOC}}

  deploy_scaleset:
    needs: create_image_build
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    name: Deploy Scaleset
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Move terraform folder
      run: mkdir -p /tmp/terraform && cp -Rv terraform/* /tmp/terraform
    - name: Inject secrets
      env:
        TFBACKEND: '${{ secrets.TFBACKEND }}'
        TFSECRETVARS: '${{ secrets.TFSECRETVARS }}'
        WORK_DIR: /tmp/terraform
      run: |
        echo "$TFBACKEND" > $WORK_DIR/node-dev/backends/backend.conf
        echo "$TFSECRETVARS" > $WORK_DIR/node-dev/.auto.tfvars
        echo "$TFVARS" > $WORK_DIR/node-dev/terraform.tfvars
    - name: Setup terraform
      env:
        WORK_DIR: /tmp/terraform/node-dev
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.7
    - name: Terraform Init
      env:
        WORK_DIR: /tmp/terraform/node-dev
      id: init
      run: cd $WORK_DIR && terraform init --backend-config=$WORK_DIR/backends/backend.conf

    - name: Terraform Validate
      env:
        WORK_DIR: /tmp/terraform/node-dev
      id: validate
      run: cd $WORK_DIR && terraform validate -no-color

    - name: Terraform Apply
      env:
        WORK_DIR: /tmp/terraform/node-dev
      id: apply
      run: cd $WORK_DIR && terraform apply --auto-approve -no-color
      continue-on-error: true
    - name: Clean terraform directory
      run: rm -r /tmp/terraform