name: Build node-dev image
on:
  workflow_call:
    inputs:
      branch_name:
        description: "node-dev branch name"
        type: string
        required: true
      environment:
        required: true
        type: string
      node_version:
        description: "Node.js version"
        default: "14"
        type: string
    secrets:
      GH_PAT:
        required: true
      AZURE_CREDENTIALS:
        required: true
      TFBACKEND:
        required: true
      TFSECRETVARS:
        required: true
      MANAGEDIDENTITY:
        required: true

  workflow_dispatch:
    inputs:
      branch_name:
        description: "node-dev branch name"
        required: true
      environment:
        type: environment
      node_version:
        description: "Node.js version"
        default: "14"
        type: string
    secrets:
      GH_PAT:
        required: true
      AZURE_CREDENTIALS:
        required: true
      TFBACKEND:
        required: true
      TFSECRETVARS:
        required: true
      MANAGEDIDENTITY:
        required: true
env:
  TFVARS: ${{ vars.TFVARS }}

jobs:
  create_image_build:
      environment: ${{ inputs.environment }}
      runs-on: ubuntu-latest
      name: Build virtual machine
      timeout-minutes: 120
      steps:
      - name: Checkout node-dev repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          repository: Trackonomy/node-dev
          token: '${{ secrets.GH_PAT }}'
          ref: ${{ inputs.branch_name }}
          path: node-dev
      - name: Log in with Azure
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
      - name: Parse needed configuration
        id: parse-conf
        env:
          TFBACKEND: '${{ secrets.TFBACKEND }}'
          TFSECRETVARS: '${{ secrets.TFSECRETVARS }}'
        run: |
          echo "$TFBACKEND" > backend.conf
          echo "$TFSECRETVARS" > .auto.tfvars
          echo "$TFVARS" > terraform.tfvars
          export PROJECT_LOC=$(awk '/project_loc/ {print $3}' terraform.tfvars)
          echo "PROJECT_LOC=$(echo $PROJECT_LOC | tr -d '\r"')" >> $GITHUB_OUTPUT
          export PROJECT_NAME=$(awk '/project_name/ {print $3}' terraform.tfvars)
          echo "PROJECT_NAME=$(echo $PROJECT_NAME | tr -d '\r"')" >> $GITHUB_OUTPUT
          export SUB_ID=$(awk '/subscription_id/ {print $3}' .auto.tfvars)
          echo "SUB_ID=$(echo $SUB_ID | tr -d '\r"')" >> $GITHUB_OUTPUT
          export IM_GAL_ID=$(awk '/image_gallery_name/ {print $3}' terraform.tfvars)
          echo "IM_GAL_ID=$(echo $IM_GAL_ID | tr -d '\r"')" >> $GITHUB_OUTPUT
          export IM_NAME=$(awk '/image_name/ {print $3}' terraform.tfvars | tr -d ",")
          echo "IM_NAME=$(echo $IM_NAME | tr -d '\r"')" >> $GITHUB_OUTPUT
          export IM_SKU=$(awk '/image_sku/ {print $3}' terraform.tfvars | tr -d ",")
          echo "IM_SKU=$(echo $IM_SKU | tr -d '\r"')" >> $GITHUB_OUTPUT
          export IM_VERSION=$(awk '/image_version/ {print $3}' terraform.tfvars | tr -d ",")
          echo "IM_VERSION=$(echo $IM_VERSION | tr -d '\r"')" >> $GITHUB_OUTPUT
          rm backend.conf .auto.tfvars terraform.tfvars
      - name: Create App Baked Image
        id: ImageBuilder
        uses: azure/build-vm-image@v0
        with:
          resource-group-name: ${{ steps.parse-conf.outputs.PROJECT_NAME }}
          managed-identity: ${{ secrets.MANAGEDIDENTITY }}
          location: ${{ steps.parse-conf.outputs.PROJECT_LOC }}
          source-os-type: 'linux'
          source-image: Canonical:UbuntuServer:18.04-LTS:latest
          customizer-source: ${{ GITHUB.WORKSPACE }}/node-dev
          customizer-script: |
            curl -sL https://deb.nodesource.com/setup_${{ inputs.node_version }}.x | sudo -E bash -
            sudo apt-get install -y nodejs
            sudo apt-get install -y build-essential
            sudo mkdir -p /apis/node-dev
            sudo cp -r /tmp/node-dev/* /apis/node-dev
            cd /apis/node-dev
            sudo npm install pm2 -g --unsafe-perm=true --allow-root
            sudo npm install --unsafe-perm=true --allow-root
          dist-type: 'SharedImageGallery'
          dist-resource-id: '/subscriptions/${{steps.parse-conf.outputs.SUB_ID}}/resourceGroups/${{steps.parse-conf.outputs.PROJECT_NAME}}/providers/Microsoft.Compute/galleries/${{steps.parse-conf.outputs.IM_GAL_ID}}/images/${{steps.parse-conf.outputs.IM_NAME}}/versions/${{steps.parse-conf.outputs.IM_VERSION}}'
          dist-location: ${{steps.parse-conf.outputs.PROJECT_LOC}}
          vm-size: ${{ steps.parse-conf.outputs.IM_SKU }}
